import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function createInputGroupComponent(prefix) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$Component = _ref.Component,
      Component = _ref$Component === void 0 ? 'div' : _ref$Component,
      defaultProps = _ref.defaultProps;

  var InputGroupComponent = function InputGroupComponent(props) {
    var className = props.className,
        _props$as = props.as,
        Tag = _props$as === void 0 ? Component : _props$as,
        styles = props.styles,
        others = _objectWithoutProperties(props, ["className", "as", "styles"]);

    return /*#__PURE__*/React.createElement(Tag, Object.assign({}, defaultProps, others, {
      className: classNames(className, prefix),
      style: styles
    }));
  };

  return InputGroupComponent;
}

var propTypes = {
  className: PropTypes.string
};
var defaultProps = {
  tag: 'div'
};

var InputGroup = function InputGroup(props) {
  var className = props.className,
      Tag = props.tag,
      styles = props.styles,
      attributes = _objectWithoutProperties(props, ["className", "tag", "styles"]);

  return /*#__PURE__*/React.createElement(Tag, Object.assign({}, attributes, {
    className: classNames(className),
    style: styles
  }));
};

var Label = function Label(props) {
  var className = props.className,
      styles = props.styles,
      children = props.children;
  return /*#__PURE__*/React.createElement("label", {
    htmlFor: props["for"],
    className: classNames(className),
    style: styles
  }, children);
};

InputGroup.Label = Label;
InputGroup.Prepend = createInputGroupComponent('input-group-prepend', {
  Component: 'span'
});
InputGroup.Append = createInputGroupComponent('input-group-append', {
  Component: 'span'
});
InputGroup.Prefix = createInputGroupComponent('input-group-prefix', {
  Component: 'span'
});
InputGroup.Suffix = createInputGroupComponent('input-group-suffix', {
  Component: 'span'
});
InputGroup.HelperText = createInputGroupComponent('input-group-helper-text');
InputGroup.ErrorText = createInputGroupComponent('input-group-error-text');
InputGroup.propTypes = propTypes;
InputGroup.defaultProps = defaultProps;

function TextInput(_ref) {
  var id = _ref.id,
      type = _ref.type,
      placeholder = _ref.placeholder,
      _onChange = _ref.onChange,
      value = _ref.value,
      invalid = _ref.invalid,
      prefix = _ref.prefix,
      suffix = _ref.suffix,
      className = _ref.className,
      _ref$styles = _ref.styles,
      styles = _ref$styles === void 0 ? {
    outline: 'none',
    border: '1px solid black',
    padding: '0.2rem 0.4rem'
  } : _ref$styles;
  var classes = classNames(className);
  return /*#__PURE__*/React.createElement("input", {
    id: id,
    type: type,
    placeholder: placeholder,
    onChange: function onChange(e) {
      return _onChange(e);
    },
    value: value,
    className: classes,
    style: styles
  });
}
TextInput.defaultProps = {
  type: 'text',
  placeholder: 'Placeholder'
};

export { InputGroup, TextInput };
